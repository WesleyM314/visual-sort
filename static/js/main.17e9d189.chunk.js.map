{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["heapify","animations","arr","len","i","largest","left","right","push","swap","a","b","temp","colorGradient","Gradient","setGradient","setMidpoint","colorArr","getArray","SortingVisualizer","props","state","array","this","resetArray","min","max","NUM_COLORS","Math","floor","random","setState","j","arrCopy","slice","length","console","log","bubbleSortAnimations","arrBars","document","getElementsByClassName","idx","val","barStyle","style","color","setTimeout","backgroundColor","minIdx","selectionSortAnimations","heapSortAnimations","className","onClick","bubbleSort","selectionSort","heapSort","map","value","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.17e9d189.chunk.js","sourcesContent":["export const bubbleSortAnimations = array =>\n{\n\tconst animations = [];\n\tconst arrCopy = array.slice();\n\n\t// Sort\n\tlet len = arrCopy.length;\n\tlet i, j;\n\tfor (i = 0; i < len - 1; i++)\n\t{\n\t\tfor (j = 0; j < len - i - 1; j++)\n\t\t{\n\t\t\t// console.log(`i: ${i}, j: ${j}`);\n\t\t\tif (arrCopy[j] > arrCopy[j + 1])\n\t\t\t{\n\t\t\t\t// Record animations\n\t\t\t\t// Set bar at index j to value at j+1\n\t\t\t\tanimations.push([j, arrCopy[j + 1]]);\n\t\t\t\t// Set bar at index j+1 to value at j\n\t\t\t\tanimations.push([j + 1, arrCopy[j]]);\n\n\t\t\t\tswap(arrCopy, j, j + 1);\n\t\t\t}\n\t\t}\n\t}\n\t// console.log(arrCopy);\n\tconsole.log(\"bubble sort done\");\n\treturn animations;\n}\n\nexport const selectionSortAnimations = array =>\n{\n\tconst animations = [];\n\tconst arrCopy = array.slice();\n\tlet len = arrCopy.length;\n\n\tlet i, j, minIdx;\n\tfor (i = 0; i < len - 1; i++)\n\t{\n\t\t// Find min value in unsorted portion\n\t\tminIdx = i;\n\t\tfor (j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (arrCopy[j] < arrCopy[minIdx])\n\t\t\t\tminIdx = j;\n\t\t}\n\t\t// Record animations\n\t\tanimations.push([minIdx, arrCopy[i]]);\n\t\tanimations.push([i, arrCopy[minIdx]]);\n\t\t// Swap minimum found value\n\t\tswap(arrCopy, minIdx, i);\n\t}\n\tconsole.log(\"selection sort done\");\n\treturn animations;\n}\n\nexport const heapSortAnimations = array =>\n{\n\tconst animations = [];\n\tconst arrCopy = array.slice();\n\tlet len = arrCopy.length;\n\n\t// console.log(\"Unsorted\");\n\t// console.log(arrCopy);\n\n\t// Build heap\n\tfor (let i = Math.floor(len / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(animations, arrCopy, len, i);\n\t}\n\n\t// Extract from heap one at a time\n\tfor (let i = len - 1; i > 0; i--)\n\t{\n\t\t// Move current root to end\n\t\tanimations.push([0, arrCopy[i]]);\n\t\tanimations.push([i, arrCopy[0]]);\n\t\tswap(arrCopy, 0, i);\n\t\t// Heapify reduced heap\n\t\theapify(animations, arrCopy, i, 0);\n\t}\n\t// console.log(\"Sorted\");\n\t// console.log(arrCopy);\n\treturn animations;\n}\n\n// Heapify a subtree rooted with node i\nfunction heapify(animations, arr, len, i) {\n\tlet largest = i;\t// Init largest as root\n\tlet left = 2 * i + 1;\t// Left\n\tlet right = 2 * i + 2;\t// Right\n\n\t// If left larger than root\n\tif (left < len && arr[left] > arr[largest])\n\t{\n\t\tlargest = left;\n\t}\n\t// If right larger than current largest\n\tif (right < len && arr[right] > arr[largest])\n\t{\n\t\tlargest = right;\n\t}\n\t// If largest is not root, swap\n\tif (largest !== i)\n\t{\n\t\tanimations.push([i, arr[largest]]);\n\t\tanimations.push([largest, arr[i]]);\n\t\tswap(arr, i, largest);\n\n\t\t// Recursively heapify the altered sub-tree\n\t\theapify(animations, arr, len, largest);\n\t}\n}\n\nfunction swap(arr, a, b)\n{\n\tlet temp = arr[a];\n\tarr[a] = arr[b];\n\tarr[b] = temp;\n}","import React from \"react\";\nimport Gradient from \"javascript-color-gradient\";\nimport \"./SortingVisualizer.css\";\nimport \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport {\n\tbubbleSortAnimations,\n\theapSortAnimations,\n\tselectionSortAnimations,\n} from \"../sortingAlgorithms/sortingAlgorithms.js\";\n\n// Animation speed\nconst ANIMATION_SPEED_MS = 0.5;\n\n// Bars in array\nconst NUM_ARRAY_BARS = 400;\n\nconst NUM_COLORS = 100;\nconst colorGradient = new Gradient();\ncolorGradient.setGradient(\n\t\"#ff0000\",\n\t\"#ff6600\",\n\t\"fff200\",\n\t\"10ff00\",\n\t\"00e1ff\",\n\t\"000cff\",\n\t\"ae00ff\"\n);\ncolorGradient.setMidpoint(NUM_COLORS);\nconst colorArr = colorGradient.getArray();\n// console.log(colorArr);\n\nexport class SortingVisualizer extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.resetArray();\n\t}\n\n\tresetArray() {\n\t\tconst array = [];\n\t\tfor (let i = 0; i < NUM_ARRAY_BARS; i++) {\n\t\t\tarray.push(randomIntInRange(0, NUM_COLORS - 1));\n\t\t\t// array.push(randColor());\n\t\t}\n\t\tthis.setState({ array });\n\t}\n\n\tbubbleSort() {\n\t\tconst animations = bubbleSortAnimations(this.state.array);\n\t\t// console.log(animations);\n\t\t// Go through animations\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst arrBars = document.getElementsByClassName(\"array-bar\");\n\t\t\tconst [idx, val] = animations[i];\n\t\t\tconst barStyle = arrBars[idx].style;\n\t\t\tconst color = colorArr[val]; // New color\n\t\t\tsetTimeout(() => {\n\t\t\t\tbarStyle.backgroundColor = color;\n\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t}\n\t}\n\n\tselectionSort() {\n\t\tconst animations = selectionSortAnimations(this.state.array);\n\t\t// Go through animations\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst arrBars = document.getElementsByClassName(\"array-bar\");\n\t\t\tconst [idx, val] = animations[i];\n\t\t\tconst barStyle = arrBars[idx].style;\n\t\t\tconst color = colorArr[val]; // New color\n\t\t\tsetTimeout(() => {\n\t\t\t\tbarStyle.backgroundColor = color;\n\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t}\n\t}\n\n\theapSort() {\n\t\tconst animations = heapSortAnimations(this.state.array);\n\t\t// Go through animations\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst arrBars = document.getElementsByClassName(\"array-bar\");\n\t\t\tconst [idx, val] = animations[i];\n\t\t\tconst barStyle = arrBars[idx].style;\n\t\t\tconst color = colorArr[val]; // New color\n\t\t\tsetTimeout(() => {\n\t\t\t\tbarStyle.backgroundColor = color;\n\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t}\n\t}\n\n\tsortTest() {}\n\n\trender() {\n\t\tconst { array } = this.state;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"button-row\">\n\t\t\t\t\t<button onClick={() => this.resetArray()}>Randomize</button>\n\t\t\t\t\t<button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n\t\t\t\t\t<button onClick={() => this.selectionSort()}>Selection Sort</button>\n\t\t\t\t\t<button onClick={() => this.heapSort()}>Heap Sort</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"array-container\">\n\t\t\t\t\t{array.map((value, idx) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"array-bar\"\n\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackgroundColor: colorArr[value],\n\t\t\t\t\t\t\t\t// height: `${75}vh`,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\n/**\n * Returns a random int from [min, max] inclusive\n * @param {min} min Minimum bound\n * @param {max} max Maximum bound\n */\nfunction randomIntInRange(min, max) {\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function randColor() {\n// \treturn Math.floor(Math.random() * 0xffffff);\n// }\n","// import logo from './logo.svg';\nimport './App.css';\nimport { SortingVisualizer } from './SortingVisualizer/SortingVisualizer';\n\nfunction App()\n{\n  return (\n    <>\n      <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}