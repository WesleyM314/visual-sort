{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["heapify","animations","arr","len","i","largest","left","right","push","swap","mergeSortAnimations","array","arrCopy","slice","mergeSort","length","l","r","m","Math","floor","arr2","j","k","merge","a","b","temp","colorGradient","Gradient","setGradient","setMidpoint","colorArr","getArray","SortingVisualizer","props","state","this","resetArray","min","max","NUM_COLORS","random","setState","console","log","bubbleSortAnimations","runAnimations","minIdx","selectionSortAnimations","heapSortAnimations","speed","arrBars","document","getElementsByClassName","idx","val","barStyle","style","color","setTimeout","backgroundColor","className","onClick","bubbleSort","selectionSort","heapSort","map","value","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.66bb17e7.chunk.js","sourcesContent":["export const bubbleSortAnimations = array =>\r\n{\r\n\tconst animations = [];\r\n\tconst arrCopy = array.slice();\r\n\r\n\t// Sort\r\n\tlet len = arrCopy.length;\r\n\tlet i, j;\r\n\tfor (i = 0; i < len - 1; i++)\r\n\t{\r\n\t\tfor (j = 0; j < len - i - 1; j++)\r\n\t\t{\r\n\t\t\t// console.log(`i: ${i}, j: ${j}`);\r\n\t\t\tif (arrCopy[j] > arrCopy[j + 1])\r\n\t\t\t{\r\n\t\t\t\t// Record animations\r\n\t\t\t\t// Set bar at index j to value at j+1\r\n\t\t\t\tanimations.push([j, arrCopy[j + 1]]);\r\n\t\t\t\t// Set bar at index j+1 to value at j\r\n\t\t\t\tanimations.push([j + 1, arrCopy[j]]);\r\n\r\n\t\t\t\tswap(arrCopy, j, j + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// console.log(arrCopy);\r\n\tconsole.log(\"bubble sort done\");\r\n\treturn animations;\r\n}\r\n\r\nexport const selectionSortAnimations = array =>\r\n{\r\n\tconst animations = [];\r\n\tconst arrCopy = array.slice();\r\n\tlet len = arrCopy.length;\r\n\r\n\tlet i, j, minIdx;\r\n\tfor (i = 0; i < len - 1; i++)\r\n\t{\r\n\t\t// Find min value in unsorted portion\r\n\t\tminIdx = i;\r\n\t\tfor (j = i + 1; j < len; j++)\r\n\t\t{\r\n\t\t\tif (arrCopy[j] < arrCopy[minIdx])\r\n\t\t\t\tminIdx = j;\r\n\t\t}\r\n\t\t// Record animations\r\n\t\tanimations.push([minIdx, arrCopy[i]]);\r\n\t\tanimations.push([i, arrCopy[minIdx]]);\r\n\t\t// Swap minimum found value\r\n\t\tswap(arrCopy, minIdx, i);\r\n\t}\r\n\tconsole.log(\"selection sort done\");\r\n\treturn animations;\r\n}\r\n\r\nexport const heapSortAnimations = array =>\r\n{\r\n\tconst animations = [];\r\n\tconst arrCopy = array.slice();\r\n\tlet len = arrCopy.length;\r\n\r\n\t// console.log(\"Unsorted\");\r\n\t// console.log(arrCopy);\r\n\r\n\t// Build heap\r\n\tfor (let i = Math.floor(len / 2) - 1; i >= 0; i--)\r\n\t{\r\n\t\theapify(animations, arrCopy, len, i);\r\n\t}\r\n\r\n\t// Extract from heap one at a time\r\n\tfor (let i = len - 1; i > 0; i--)\r\n\t{\r\n\t\t// Move current root to end\r\n\t\tanimations.push([0, arrCopy[i]]);\r\n\t\tanimations.push([i, arrCopy[0]]);\r\n\t\tswap(arrCopy, 0, i);\r\n\t\t// Heapify reduced heap\r\n\t\theapify(animations, arrCopy, i, 0);\r\n\t}\r\n\t// console.log(\"Sorted\");\r\n\t// console.log(arrCopy);\r\n\treturn animations;\r\n}\r\n\r\n// Heapify a subtree rooted with node i\r\nfunction heapify(animations, arr, len, i)\r\n{\r\n\tlet largest = i;\t// Init largest as root\r\n\tlet left = 2 * i + 1;\t// Left\r\n\tlet right = 2 * i + 2;\t// Right\r\n\r\n\t// If left larger than root\r\n\tif (left < len && arr[left] > arr[largest])\r\n\t{\r\n\t\tlargest = left;\r\n\t}\r\n\t// If right larger than current largest\r\n\tif (right < len && arr[right] > arr[largest])\r\n\t{\r\n\t\tlargest = right;\r\n\t}\r\n\t// If largest is not root, swap\r\n\tif (largest !== i)\r\n\t{\r\n\t\tanimations.push([i, arr[largest]]);\r\n\t\tanimations.push([largest, arr[i]]);\r\n\t\tswap(arr, i, largest);\r\n\r\n\t\t// Recursively heapify the altered sub-tree\r\n\t\theapify(animations, arr, len, largest);\r\n\t}\r\n}\r\n\r\nexport const mergeSortAnimations = array =>\r\n{\r\n\tconst animations = [];\r\n\tconst arrCopy = array.slice();\r\n\tlet len = arrCopy.length;\r\n\r\n\tmergeSort(animations, array, 0, len - 1);\r\n\treturn animations;\r\n}\r\n\r\nfunction mergeSort(animations, arr, l, r)\r\n{\r\n\t// Base case\r\n\tif (l >= r)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tlet m = Math.floor((l + r) / 2);\r\n\t// Call recursively on each half of arr\r\n\tmergeSort(animations, arr, l, m);\r\n\tmergeSort(animations, arr, m + 1, r);\r\n\t// Merge\r\n\tmerge(animations, arr, l, m, r);\r\n}\r\n\r\nfunction merge(animations, arr, l, m, r)\r\n{\r\n\tlet arr2 = arr.slice();\r\n\r\n\tlet i = l;\r\n\tlet j = m + 1;\r\n\tlet k = l;\r\n\r\n\twhile (i <= m && j <= r)\r\n\t{\r\n\t\tif (arr2[i] <= arr2[j])\r\n\t\t{\r\n\t\t\t// If overwriting, add to animations\r\n\t\t\tanimations.push([k, arr2[i]]);\r\n\t\t\tarr[k++] = arr2[i++];\r\n\t\t} else\r\n\t\t{\r\n\t\t\tanimations.push([k, arr2[j]]);\r\n\t\t\tarr[k++] = arr2[j++];\r\n\t\t}\r\n\t}\r\n\r\n\twhile (i <= m)\r\n\t{\r\n\t\tanimations.push([k, arr2[i]]);\r\n\t\tarr[k++] = arr2[i++];\r\n\t}\r\n}\r\n\r\nfunction swap(arr, a, b)\r\n{\r\n\tlet temp = arr[a];\r\n\tarr[a] = arr[b];\r\n\tarr[b] = temp;\r\n}","import React from \"react\";\r\nimport Gradient from \"javascript-color-gradient\";\r\nimport \"./SortingVisualizer.css\";\r\nimport \"../sortingAlgorithms/sortingAlgorithms.js\";\r\nimport {\r\n\tbubbleSortAnimations,\r\n\theapSortAnimations,\r\n\tmergeSortAnimations,\r\n\tselectionSortAnimations,\r\n} from \"../sortingAlgorithms/sortingAlgorithms.js\";\r\n\r\n// Animation speed\r\nconst ANIMATION_SPEED_MS = 0.5;\r\n\r\n// Bars in array\r\nconst NUM_ARRAY_BARS = 512;\r\n\r\nconst NUM_COLORS = 400;\r\nconst colorGradient = new Gradient();\r\ncolorGradient.setGradient(\r\n\t\"#ff0000\",\r\n\t\"#ff6600\",\r\n\t\"fff200\",\r\n\t\"10ff00\",\r\n\t\"00e1ff\",\r\n\t\"000cff\",\r\n\t\"ae00ff\"\r\n);\r\ncolorGradient.setMidpoint(NUM_COLORS);\r\nconst colorArr = colorGradient.getArray();\r\n// console.log(colorArr);\r\n\r\nexport class SortingVisualizer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tarray: [],\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.resetArray();\r\n\t}\r\n\r\n\tresetArray() {\r\n\t\tconst array = [];\r\n\t\tfor (let i = 0; i < NUM_ARRAY_BARS; i++) {\r\n\t\t\tarray.push(randomIntInRange(0, NUM_COLORS - 1));\r\n\t\t\t// array.push(randColor());\r\n\t\t}\r\n\t\tthis.setState({ array });\r\n\t}\r\n\r\n\tbubbleSort() {\r\n\t\tconst animations = bubbleSortAnimations(this.state.array);\r\n\t\tthis.runAnimations(animations, ANIMATION_SPEED_MS);\r\n\t}\r\n\r\n\tselectionSort() {\r\n\t\tconst animations = selectionSortAnimations(this.state.array);\r\n\t\tthis.runAnimations(animations, ANIMATION_SPEED_MS);\r\n\t}\r\n\r\n\theapSort() {\r\n\t\tconst animations = heapSortAnimations(this.state.array);\r\n\t\tthis.runAnimations(animations, ANIMATION_SPEED_MS);\r\n\t}\r\n\r\n\tmergeSort() {\r\n\t\tconst animations = mergeSortAnimations(this.state.array);\r\n\t\tthis.runAnimations(animations, 2);\r\n\t}\r\n\r\n\trunAnimations(animations, speed) {\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\tconst arrBars = document.getElementsByClassName(\"array-bar\");\r\n\t\t\tconst [idx, val] = animations[i];\r\n\t\t\tconst barStyle = arrBars[idx].style;\r\n\t\t\tconst color = colorArr[val]; // New color\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tbarStyle.backgroundColor = color;\r\n\t\t\t}, i * speed);\r\n\t\t}\r\n\t}\r\n\r\n\tsortTest() {}\r\n\r\n\trender() {\r\n\t\tconst { array } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"button-row\">\r\n\t\t\t\t\t<button onClick={() => this.resetArray()}>Randomize</button>\r\n\t\t\t\t\t<button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n\t\t\t\t\t<button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n\t\t\t\t\t<button onClick={() => this.heapSort()}>Heap Sort</button>\r\n\t\t\t\t\t<button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n\t\t\t\t\t<button onClick={() => this.heapSort()}>Quick Sort</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"array-container\">\r\n\t\t\t\t\t{array.map((value, idx) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tbackgroundColor: colorArr[value],\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t></div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a random int from [min, max] inclusive\r\n * @param {min} min Minimum bound\r\n * @param {max} max Maximum bound\r\n */\r\nfunction randomIntInRange(min, max) {\r\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function randColor() {\r\n// \treturn Math.floor(Math.random() * 0xffffff);\r\n// }\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport { SortingVisualizer } from './SortingVisualizer/SortingVisualizer';\n\nfunction App()\n{\n  return (\n    <>\n      <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}